<?php

/**
 * @file
 * Creates a block to send an email to node author -- D6
 */
 
/**
 * implementation of hook_block
 */
 function authorcontact_block($op = 'list', $delta = 0, $edit = array()) {
    switch ($op) {
        case 'list':
            $blocks[0]['info'] = t('Author Contact');
			$blocks[0]['cache'] = BLOCK_NO_CACHE;
            return $blocks;
        
        case 'configure':
            
			$form['authorcontact_desc'] = array(
                '#type' 		 => 'textfield',
                '#title' 		 => t('Contact description'),
                '#description'   => t('This text will show at the top of the Author Contact block, can be used for instructions etc.'),
				'#default_value' => variable_get('authorcontact_desc', '')
            );
			
			$form['authorcontact_bcc'] = array(
                '#type' 		 => 'textfield',
                '#title' 		 => t('BCC address'),
                '#description'   => t('Enter a comma-separated lsit of email addresses for all contact submissions to be BCCed to. Usually for site administration purposes. Please don\'t abuse privacy with this feature. Leave empty for no BCC emails.'),
                '#default_value' => variable_get('authorcontact_bcc', '')
            );
			
			$form['authorcontact_form_width'] = array(
                '#type'			 => 'textfield',
                '#title' 		 => t('Form width for name & email fields'),
                '#default_value' => variable_get('authorcontact_form_width', 15)
            );
			
            $form['authorcontact_form_height'] = array(
                '#type' 		 => 'textfield',
                '#title' 		 => t('Height in lines for the message textbox'),
				'#description'   => t('Default is 4'),
                '#default_value' => variable_get('authorcontact_form_height', 4)
            );
			
            $types = node_get_types();
            $options = array();
            foreach ($types as $type) {
              $options[$type->type] = $type->name;
            }
			
            $form['authorcontact_block_display_types'] = array(
				'#type' 		 => 'checkboxes',
				'#title' 		 => t('Display on nodes of type'),
				'#options' 		 => $options,
				'#default_value' => variable_get('authorcontact_block_display_types', array()),
             );
            
			
            return $form;
        
        case 'save':
            variable_set( 'authorcontact_desc', 		  		$edit['authorcontact_desc'] );
			variable_set( 'authorcontact_bcc',  		  		$edit['authorcontact_bcc'] );
			variable_set( 'authorcontact_form_width',  	  		$edit['authorcontact_form_width'] );
            variable_set( 'authorcontact_form_height',    		$edit['authorcontact_form_height'] );           
            variable_set( 'authorcontact_block_display_types',  $edit['authorcontact_block_display_types'] );
            break;
        
        case 'view':
            if (arg(0) == 'node' && is_numeric(arg(1)) && arg(2) == '') {
			
				//check if author has allowed contact in profile settings
                $nid    = (int) arg(1);
                $node   = node_load(array('nid' => $nid));
                $author = user_load(array('uid' => $node->uid));
                $adata  = unserialize($author->data);
                if (empty($adata['contact'])) {
					// User has not allowed contact in profile settings
                   return;
                }
				      
                // Check if current node type is selected to show block
                $allowed_types = variable_get('authorcontact_block_display_types', array());
                if (empty($allowed_types[$node->type])) {
                  // Not a type we want to show on.
                  return;
                }
				
				// create block
				$block['subject'] = t('Contact Author');
	            $block['content'] = t('<div class="authorcontact-desc">
	            						%desc
	            					   </div>',
	                                    array('%desc' => variable_get('authorcontact_desc', ''))
	                              	);				
				
				// hide form and alert user if the message limit is met
		        if (!flood_is_allowed('authorcontact', variable_get('contact_hourly_threshold', 3))) {
			        $block['content'] .= t('<div class="messages status">
			        						 <em>You cannot send more than %number messages per hour. Please try again later.</em>
			                                </div>',
			                                array('%number' => variable_get('contact_hourly_threshold', 3))
			                             );     
				}
		        
		        else {
			        $block['content'] .= drupal_get_form('authorcontact_form');
				}
				
                    return $block;
            }
            
            break;
        
    }
 }
 
/**
 * Define the form for the block
 */
 function authorcontact_form() {
 
    $node = node_load(arg(1));
	
    $form['sendername'] = array(
        '#title' 	=> t('Your name'),
		'#size' 	=> variable_get('authorcontact_form_width', 15),
        '#type' 	=> 'textfield',
        '#required' => true
    );
	
    $form['senderemail'] = array(
        '#title' 	=> t('Email'),
        '#type' 	=> 'textfield',
		'#size' 	=> variable_get('authorcontact_form_width', 15),
        '#required' => true
    );
	
    $form['sendercomment'] = array(
        '#title' 	=> t('Comment'),
        '#type' 	=> 'textarea',
        '#rows' 	=> variable_get('authorcontact_form_height', 4),
        '#required' => true
    );
	
    $form['nodetitle'] = array(
        '#type'  => 'hidden',
        '#value' => $node->title
    );
	
    $form['send'] = array(
        '#type'  => 'submit',
        '#value' => t('Send')
    );
	
    return $form;
}
 
/**
 * Validate the form
 */
function authorcontact_form_validate($form_id, $form_values) {
    
	//check the email address is valid
    if(isset($form_values['values']['senderemail'])) {
	
		if (!valid_email_address($form_values['values']['senderemail'])) {
		   form_set_error('mail', t('The e-mail address you specified is not valid.'));
		}
		
    }
}

/**
 * Submit the form
 */
function authorcontact_form_submit($form_id, &$form_state) {

	$node 		= node_load(arg(1));
    $pageAuthor = user_load(array('uid' => $node->uid));
    $to 		= $pageAuthor->mail;
    $from 		= '"' . $form_state['values']['sendername'] . '" <' . $form_state['values']['senderemail'] . '>';
	
    //create email vars
    $params = array(
        'sendername' 	=> $form_state['values']['sendername'],
        'senderemail' 	=> $form_state['values']['senderemail'],
        'sendercomment' => $form_state['values']['sendercomment'],
        'nodetitle' 	=> $form_state['values']['nodetitle'],
        'referrer' 		=> $_SERVER['HTTP_REFERER']
    );
    
    drupal_mail('authorcontact', 'sendcontact', $to, language_default(), $params, $from);
	
	//make watchdog entry
	watchdog(
		'mail', 
		'Author Contact: %name-to was sent an e-mail from %name-from using the form on %page', 
		array(
			'%name-to' 	 => $to, 
			'%name-from' => $from, 
			'%page' 	 => $params['referrer']
		)
	);
	
	// flood control
	flood_register_event('authorcontact');
	
	//make note
    drupal_set_message(t('Contact sent from @from.', array('@from' => $form_state['values']['senderemail'])));
}


function authorcontact_mail($key, &$message, $params) {

	$language = $message['language'];
	
	switch($key) {
	
		case 'sendcontact':
			
			$bcc = variable_get('authorcontact_bcc', '');
			
			if ($bcc > '') {
				$message['headers']['Bcc'] = $bcc;
			}
			
			$message['subject'] = t('Contact via @site', array('@site' => variable_get('site_name', 'Your website')));
			$message['body'][]  = t('You have received an enquiry through @sitename on the page @nodetitle at @referrer
 
    
Name: @name

Email: @email 

Enquiry:
@comment',
				array(
					'@sitename'  => variable_get('site_name', t('')), 
					'@nodetitle' => $params['nodetitle'], 
					'@referrer'  => $params['referrer'], 
					'@name' 	 => $params['sendername'], 
					'@email' 	 => $params['senderemail'], 
					'@comment' 	 => $params['sendercomment']
				)
			);

		break;
	}   
}
